trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  acrName: 'ecommerceregistry1'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    # Build and push the User Service Docker image
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: '$(acrName).azurecr.io/user-service'
        dockerfile: 'user-service/Dockerfile'
        containerRegistry: 'ecommerceregistry1'
        tags: |
          $(Build.BuildId)

    # Build and push the Product Service Docker image
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: '$(acrName).azurecr.io/product-service'
        dockerfile: 'product-service/Dockerfile'
        containerRegistry: 'ecommerceregistry1'
        tags: |
          $(Build.BuildId)

    # Build and push the Order Service Docker image
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: '$(acrName).azurecr.io/order-service'
        dockerfile: 'order-service/Dockerfile'
        containerRegistry: 'ecommerceregistry1'
        tags: |
          $(Build.BuildId)

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: Deploy
    steps:
    # Configure kubectl to use the AKS credentials
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group rg_ecommerce-microservices --name ecommerce-aks --overwrite-existing
        addSpnToEnvironment: true

    # Check Kubernetes Cluster Connection
    - script: |
        kubectl get nodes
      displayName: 'Check Kubernetes Cluster Connection'

    # Deploy the User Service to AKS
    - script: |
        kubectl apply -f user-service/deployment.yaml --record
      displayName: 'Deploy User Service to AKS'

    # Deploy the Product Service to AKS
    - script: |
        kubectl apply -f product-service/deployment.yaml --record
      displayName: 'Deploy Product Service to AKS'

    # Deploy the Order Service to AKS
    - script: |
        kubectl apply -f order-service/deployment.yaml --record
      displayName: 'Deploy Order Service to AKS'
