variables:
  acrName: 'ecommerceregistry1'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    # Build and push the User Service Docker image
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: '$(acrName).azurecr.io/user-service'
        dockerfile: 'user-service/Dockerfile'
        containerRegistry: 'ecommerceregistry1'
        tags: |
          $(Build.BuildId)
          latest

    # Build and push the Product Service Docker image
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: '$(acrName).azurecr.io/product-service'
        dockerfile: 'product-service/Dockerfile'
        containerRegistry: 'ecommerceregistry1'
        tags: |
          $(Build.BuildId)
          latest

    # Build and push the Order Service Docker image
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: '$(acrName).azurecr.io/order-service'
        dockerfile: 'order-service/Dockerfile'
        containerRegistry: 'ecommerceregistry1'
        tags: |
          $(Build.BuildId)
          latest

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: Deploy
    steps:
    # Configure kubectl to use the AKS credentials
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group rg_ecommerce-microservices --name ecommerce-aks
          kubectl apply -f deployment.yaml